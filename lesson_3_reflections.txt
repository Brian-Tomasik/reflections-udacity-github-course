When would you want to use a remote repository rather than keeping all your work local?

  - When collaborating with others
  - As a way to back up in case the local hard drive crashes
  - To share your work publicly

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	The remote might have changes that are inconsistent with your local version.

Describe the differences between forks, clones, and branches. When would you 
use one instead of another?

	Branch: within a given project, allow for different paths of commits.
	Clone: copy a whole repository, either locally or from GitHub to a local
	machine.
	Fork: copy a whole repository like clone, but keep a link back to the 
	original; only works on GitHub.

What is the benefit of having a copy of the last known state of the remote 
stored locally?

	Having it locally allows for diffing against your local changes. Also, as
	the video said, if you go on a plane flight, you might want to play with 
	the latest remote without having Internet access.

How would you collaborate without using Git or GitHub? What would be easier, \
and what would be harder?

	Possibilities:
	1. Sitting side by side
	- Easier: Can verbally discuss problems without needing to commit, push, 
	get emails, etc.
	- Harder: Don't have as much record of the history of the project. Changes
	aren't visible to outsiders. Can't work as easily when not together.
	2. Manual communication by email
	- Easier: Can work apart.
	- Harder: Need to manually describe ideas that GitHub builds into its 
	system. Would need to manually diff files. Still need version control for
	backups anyway.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	Directly in master: Working by yourself, with all changes being relatively
	clear and essential. Benefit is that you can avoid the overhead of managing
	branches and merging. Cost is that if you break something, the whole system
	is broken.
	Separate branches: Allows for collaboration in which different people work
	on different things. Benefits: Don't have to worry about breaking the system
	for everyone else. Can work on multiple features and bug-fixes at once. 
	Cost: More overhead, merging headaches, etc.

